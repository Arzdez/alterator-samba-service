#!/usr/bin/env python3
from pydbus import SystemBus
import argparse
import sys
import json

def arg_parser():
    parser = argparse.ArgumentParser(description="Alterator samba ad Service",
                                     usage='%(prog)s [--path Path-to-object] [-m METHOD] [-p path-to-json]')

    parser.add_argument(
        "--path",
        help="dbus object path",
        default="/org/altlinux/alterator/service_samba_dc"
    )
    parser.add_argument(
        "-m","--method",
        help="method name",
        default="Info",
        choices=["Info", "Deploy", "Undeploy", "Status", "Restore", "Backup"]
    )
    parser.add_argument(
        "-p","--params",
        help="path to json file with parameter",
    )

    return parser.parse_args()

def main():
    bus = SystemBus()
    args = arg_parser()

    print(args)
    path_to_obect = args.path
    method = args.method.title()
    path_to_json= args.params

    with open(path_to_json) as f:
        json_data = json.load(f)

    if not path_to_obect:
        print("Path is required")
        sys.exit(1)
    elif method in ["Deploy", "Backup", "Restore"] and not args.params:
        print("Missing --params argument")
        print(f"Params is required for {args.method} method")
        sys.exit(1)

    obj = bus.get(
        "org.altlinux.alterator",
         path_to_obect
    )["org.altlinux.alterator.service1"]

    json_data = json.dumps(json_data)

    if method in ["Deploy", "Backup", "Restore"]:
        return_val=getattr(obj, method)(str(json_data)+"\n")
        print(f"Return code: {return_val}")
    else:
        print(getattr(obj, method)())

if __name__ == "__main__":
    main()